      this.Module || (Module = function Module(id, parent) {
        // https://github.com/joyent/node/blob/master/lib/module.js#L37-L48
        this.id = id;
        this.exports = {};
        this.parent = parent;
        if (parent && parent.children) {
          parent.children.push(this);
        }

        this.filename = null;
        this.loaded = false;
        this.children = [];
      });
      
      Module._cache = {};
      Module._load = function(request, parent, isMain) {
        // TODO
      };
      Module._resolveFilename = function(request, parent) {
        // TODO
      };
      
      
      this.exports || (exports = {});
      this.module || new Module('.');
      
      this.__filename || (__filename = 'browser-suite.html');
      
      function require(id) {
        console.log(id);
        document.write('<script src="' + id + '.js">' + '<\/' + 'script>');
        //return module.exports;
      }
      
      require._cache = Module._cache;
      require.resolve = function resolve(request) {
        return Module._resolveFilename(request, /*monad.*//*module);
      }*/
      
      /*
      monad.require = function require(id) {
        return monad.module.require(id);
      };
      monad.require.resolve = function resolve(request) {
        return Module._resolveFilename(request, monad.module);
      };
      monad.require.cache = Module._cache;
      */
  
      function assert(ok, message) {
        ok || (function (msg) {
          throw new Error(msg);
        }(message));
      }
      
      function require(id) {
        console.log(id + ': ' + (id in this));
        if ( !(id in this) ) {
        module = new Module(id);
        document.write('<script src="' + id + '.js">' + '<\/' + 'script>');
        return module.exports;
        } else {
          return this[id]
        }
      }
      
      this.Module || (Module = function Module(id, parent) {
        // https://github.com/joyent/node/blob/master/lib/module.js#L37-L48
        this.id = id;
        this.exports = {};
        this.parent = parent;
        if (parent && parent.children) {
          parent.children.push(this);
        }

        this.filename = null;
        this.loaded = false;
        this.children = [];
      });
      
      Module._cache = {};
      Module._load = function(request, parent, isMain) {
        // TODO
      };
      Module._resolveFilename = function(request, parent) {
        // TODO
      };
      this.__filename || (__filename = '.');

      this.module || (module = new Module('.'));

      